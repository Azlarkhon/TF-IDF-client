/*
TF-IDF counter API

Testing CollectionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/Azlarkhon/TF-IDF-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_CollectionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CollectionsAPIService CollectionsAddManyPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsAddManyPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionsCollectionIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var collectionId string

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsCollectionIdDelete(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionsCollectionIdDocumentIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var collectionId string
		var documentId string

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsCollectionIdDocumentIdDelete(context.Background(), collectionId, documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionsCollectionIdDocumentIdPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var collectionId string
		var documentId string

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsCollectionIdDocumentIdPost(context.Background(), collectionId, documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionsCollectionIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var collectionId string

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsCollectionIdGet(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionsCollectionIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var collectionId string

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsCollectionIdPut(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionsCollectionIdStatisticsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var collectionId string

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsCollectionIdStatisticsGet(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
