/*
TF-IDF counter API

API for document processing using TF-IDF algorithm

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoAddDocumentToCollectionsReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoAddDocumentToCollectionsReq{}

// DtoAddDocumentToCollectionsReq struct for DtoAddDocumentToCollectionsReq
type DtoAddDocumentToCollectionsReq struct {
	CollectionIds []int32 `json:"collection_ids"`
	DocumentId int32 `json:"document_id"`
}

type _DtoAddDocumentToCollectionsReq DtoAddDocumentToCollectionsReq

// NewDtoAddDocumentToCollectionsReq instantiates a new DtoAddDocumentToCollectionsReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoAddDocumentToCollectionsReq(collectionIds []int32, documentId int32) *DtoAddDocumentToCollectionsReq {
	this := DtoAddDocumentToCollectionsReq{}
	this.CollectionIds = collectionIds
	this.DocumentId = documentId
	return &this
}

// NewDtoAddDocumentToCollectionsReqWithDefaults instantiates a new DtoAddDocumentToCollectionsReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoAddDocumentToCollectionsReqWithDefaults() *DtoAddDocumentToCollectionsReq {
	this := DtoAddDocumentToCollectionsReq{}
	return &this
}

// GetCollectionIds returns the CollectionIds field value
func (o *DtoAddDocumentToCollectionsReq) GetCollectionIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.CollectionIds
}

// GetCollectionIdsOk returns a tuple with the CollectionIds field value
// and a boolean to check if the value has been set.
func (o *DtoAddDocumentToCollectionsReq) GetCollectionIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CollectionIds, true
}

// SetCollectionIds sets field value
func (o *DtoAddDocumentToCollectionsReq) SetCollectionIds(v []int32) {
	o.CollectionIds = v
}

// GetDocumentId returns the DocumentId field value
func (o *DtoAddDocumentToCollectionsReq) GetDocumentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value
// and a boolean to check if the value has been set.
func (o *DtoAddDocumentToCollectionsReq) GetDocumentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentId, true
}

// SetDocumentId sets field value
func (o *DtoAddDocumentToCollectionsReq) SetDocumentId(v int32) {
	o.DocumentId = v
}

func (o DtoAddDocumentToCollectionsReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoAddDocumentToCollectionsReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collection_ids"] = o.CollectionIds
	toSerialize["document_id"] = o.DocumentId
	return toSerialize, nil
}

func (o *DtoAddDocumentToCollectionsReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"collection_ids",
		"document_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoAddDocumentToCollectionsReq := _DtoAddDocumentToCollectionsReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoAddDocumentToCollectionsReq)

	if err != nil {
		return err
	}

	*o = DtoAddDocumentToCollectionsReq(varDtoAddDocumentToCollectionsReq)

	return err
}

type NullableDtoAddDocumentToCollectionsReq struct {
	value *DtoAddDocumentToCollectionsReq
	isSet bool
}

func (v NullableDtoAddDocumentToCollectionsReq) Get() *DtoAddDocumentToCollectionsReq {
	return v.value
}

func (v *NullableDtoAddDocumentToCollectionsReq) Set(val *DtoAddDocumentToCollectionsReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoAddDocumentToCollectionsReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoAddDocumentToCollectionsReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoAddDocumentToCollectionsReq(val *DtoAddDocumentToCollectionsReq) *NullableDtoAddDocumentToCollectionsReq {
	return &NullableDtoAddDocumentToCollectionsReq{value: val, isSet: true}
}

func (v NullableDtoAddDocumentToCollectionsReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoAddDocumentToCollectionsReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


