/*
TF-IDF counter API

API for document processing using TF-IDF algorithm

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServicesWordStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesWordStat{}

// ServicesWordStat struct for ServicesWordStat
type ServicesWordStat struct {
	Count *int32 `json:"count,omitempty"`
	Idf *float32 `json:"idf,omitempty"`
	Tf *float32 `json:"tf,omitempty"`
	Word *string `json:"word,omitempty"`
}

// NewServicesWordStat instantiates a new ServicesWordStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesWordStat() *ServicesWordStat {
	this := ServicesWordStat{}
	return &this
}

// NewServicesWordStatWithDefaults instantiates a new ServicesWordStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesWordStatWithDefaults() *ServicesWordStat {
	this := ServicesWordStat{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ServicesWordStat) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesWordStat) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ServicesWordStat) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ServicesWordStat) SetCount(v int32) {
	o.Count = &v
}

// GetIdf returns the Idf field value if set, zero value otherwise.
func (o *ServicesWordStat) GetIdf() float32 {
	if o == nil || IsNil(o.Idf) {
		var ret float32
		return ret
	}
	return *o.Idf
}

// GetIdfOk returns a tuple with the Idf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesWordStat) GetIdfOk() (*float32, bool) {
	if o == nil || IsNil(o.Idf) {
		return nil, false
	}
	return o.Idf, true
}

// HasIdf returns a boolean if a field has been set.
func (o *ServicesWordStat) HasIdf() bool {
	if o != nil && !IsNil(o.Idf) {
		return true
	}

	return false
}

// SetIdf gets a reference to the given float32 and assigns it to the Idf field.
func (o *ServicesWordStat) SetIdf(v float32) {
	o.Idf = &v
}

// GetTf returns the Tf field value if set, zero value otherwise.
func (o *ServicesWordStat) GetTf() float32 {
	if o == nil || IsNil(o.Tf) {
		var ret float32
		return ret
	}
	return *o.Tf
}

// GetTfOk returns a tuple with the Tf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesWordStat) GetTfOk() (*float32, bool) {
	if o == nil || IsNil(o.Tf) {
		return nil, false
	}
	return o.Tf, true
}

// HasTf returns a boolean if a field has been set.
func (o *ServicesWordStat) HasTf() bool {
	if o != nil && !IsNil(o.Tf) {
		return true
	}

	return false
}

// SetTf gets a reference to the given float32 and assigns it to the Tf field.
func (o *ServicesWordStat) SetTf(v float32) {
	o.Tf = &v
}

// GetWord returns the Word field value if set, zero value otherwise.
func (o *ServicesWordStat) GetWord() string {
	if o == nil || IsNil(o.Word) {
		var ret string
		return ret
	}
	return *o.Word
}

// GetWordOk returns a tuple with the Word field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesWordStat) GetWordOk() (*string, bool) {
	if o == nil || IsNil(o.Word) {
		return nil, false
	}
	return o.Word, true
}

// HasWord returns a boolean if a field has been set.
func (o *ServicesWordStat) HasWord() bool {
	if o != nil && !IsNil(o.Word) {
		return true
	}

	return false
}

// SetWord gets a reference to the given string and assigns it to the Word field.
func (o *ServicesWordStat) SetWord(v string) {
	o.Word = &v
}

func (o ServicesWordStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesWordStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Idf) {
		toSerialize["idf"] = o.Idf
	}
	if !IsNil(o.Tf) {
		toSerialize["tf"] = o.Tf
	}
	if !IsNil(o.Word) {
		toSerialize["word"] = o.Word
	}
	return toSerialize, nil
}

type NullableServicesWordStat struct {
	value *ServicesWordStat
	isSet bool
}

func (v NullableServicesWordStat) Get() *ServicesWordStat {
	return v.value
}

func (v *NullableServicesWordStat) Set(val *ServicesWordStat) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesWordStat) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesWordStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesWordStat(val *ServicesWordStat) *NullableServicesWordStat {
	return &NullableServicesWordStat{value: val, isSet: true}
}

func (v NullableServicesWordStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesWordStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


