/*
TF-IDF counter API

API for document processing using TF-IDF algorithm

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HelperResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelperResponse{}

// HelperResponse This is the standard response format for all API endpoints
type HelperResponse struct {
	Data map[string]interface{} `json:"data,omitempty"`
	Error *string `json:"error,omitempty"`
	IsSuccess *bool `json:"is_success,omitempty"`
}

// NewHelperResponse instantiates a new HelperResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelperResponse() *HelperResponse {
	this := HelperResponse{}
	return &this
}

// NewHelperResponseWithDefaults instantiates a new HelperResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelperResponseWithDefaults() *HelperResponse {
	this := HelperResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *HelperResponse) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelperResponse) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *HelperResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *HelperResponse) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *HelperResponse) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelperResponse) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *HelperResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *HelperResponse) SetError(v string) {
	o.Error = &v
}

// GetIsSuccess returns the IsSuccess field value if set, zero value otherwise.
func (o *HelperResponse) GetIsSuccess() bool {
	if o == nil || IsNil(o.IsSuccess) {
		var ret bool
		return ret
	}
	return *o.IsSuccess
}

// GetIsSuccessOk returns a tuple with the IsSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelperResponse) GetIsSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuccess) {
		return nil, false
	}
	return o.IsSuccess, true
}

// HasIsSuccess returns a boolean if a field has been set.
func (o *HelperResponse) HasIsSuccess() bool {
	if o != nil && !IsNil(o.IsSuccess) {
		return true
	}

	return false
}

// SetIsSuccess gets a reference to the given bool and assigns it to the IsSuccess field.
func (o *HelperResponse) SetIsSuccess(v bool) {
	o.IsSuccess = &v
}

func (o HelperResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelperResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.IsSuccess) {
		toSerialize["is_success"] = o.IsSuccess
	}
	return toSerialize, nil
}

type NullableHelperResponse struct {
	value *HelperResponse
	isSet bool
}

func (v NullableHelperResponse) Get() *HelperResponse {
	return v.value
}

func (v *NullableHelperResponse) Set(val *HelperResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHelperResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHelperResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelperResponse(val *HelperResponse) *NullableHelperResponse {
	return &NullableHelperResponse{value: val, isSet: true}
}

func (v NullableHelperResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelperResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


