/*
TF-IDF counter API

API for document processing using TF-IDF algorithm

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DtoDocumentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoDocumentResponse{}

// DtoDocumentResponse struct for DtoDocumentResponse
type DtoDocumentResponse struct {
	Content *string `json:"content,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	UploadedAt *string `json:"uploaded_at,omitempty"`
}

// NewDtoDocumentResponse instantiates a new DtoDocumentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoDocumentResponse() *DtoDocumentResponse {
	this := DtoDocumentResponse{}
	return &this
}

// NewDtoDocumentResponseWithDefaults instantiates a new DtoDocumentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoDocumentResponseWithDefaults() *DtoDocumentResponse {
	this := DtoDocumentResponse{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *DtoDocumentResponse) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDocumentResponse) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *DtoDocumentResponse) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *DtoDocumentResponse) SetContent(v string) {
	o.Content = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoDocumentResponse) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDocumentResponse) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoDocumentResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DtoDocumentResponse) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoDocumentResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDocumentResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoDocumentResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoDocumentResponse) SetName(v string) {
	o.Name = &v
}

// GetUploadedAt returns the UploadedAt field value if set, zero value otherwise.
func (o *DtoDocumentResponse) GetUploadedAt() string {
	if o == nil || IsNil(o.UploadedAt) {
		var ret string
		return ret
	}
	return *o.UploadedAt
}

// GetUploadedAtOk returns a tuple with the UploadedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDocumentResponse) GetUploadedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UploadedAt) {
		return nil, false
	}
	return o.UploadedAt, true
}

// HasUploadedAt returns a boolean if a field has been set.
func (o *DtoDocumentResponse) HasUploadedAt() bool {
	if o != nil && !IsNil(o.UploadedAt) {
		return true
	}

	return false
}

// SetUploadedAt gets a reference to the given string and assigns it to the UploadedAt field.
func (o *DtoDocumentResponse) SetUploadedAt(v string) {
	o.UploadedAt = &v
}

func (o DtoDocumentResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoDocumentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UploadedAt) {
		toSerialize["uploaded_at"] = o.UploadedAt
	}
	return toSerialize, nil
}

type NullableDtoDocumentResponse struct {
	value *DtoDocumentResponse
	isSet bool
}

func (v NullableDtoDocumentResponse) Get() *DtoDocumentResponse {
	return v.value
}

func (v *NullableDtoDocumentResponse) Set(val *DtoDocumentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoDocumentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoDocumentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoDocumentResponse(val *DtoDocumentResponse) *NullableDtoDocumentResponse {
	return &NullableDtoDocumentResponse{value: val, isSet: true}
}

func (v NullableDtoDocumentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoDocumentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


